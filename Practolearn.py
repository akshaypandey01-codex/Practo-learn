{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/akshaypandey01-codex/Practo-learn/blob/main/Practolearn.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Bmx1IMLrHf2o"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6bcef4da"
      },
      "source": [
        "!pip install crewai"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from crewai import LLM, Agent, Task, Crew, Process\n",
        "import json\n",
        "\n",
        "# ------------------ LLM Setup ------------------\n",
        "llm = LLM(model=\"gemini/gemini-2.0-flash\", temperature=0.2)\n",
        "\n",
        "# ------------------ Define Agents with Backstory ------------------\n",
        "\n",
        "learner_agent = Agent(\n",
        "    llm=llm,\n",
        "    role=\"Learner Assessment Agent\",\n",
        "    goal=\"Assess the learner's current skill level, learning style, and knowledge gaps.\",\n",
        "    backstory=\"\"\"\n",
        "    You are a personalized skill assessment specialist.\n",
        "    You detect what learners truly know vs. what they think they know.\n",
        "    Your mini-exercises identify skill gaps and preferred learning methods.\n",
        "    \"\"\",\n",
        "    verbose=True\n",
        ")\n",
        "\n",
        "mentor_agent = Agent(\n",
        "    llm=llm,\n",
        "    role=\"Mentor Agent\",\n",
        "    goal=\"Suggest practical mini-projects and hands-on exercises to help learners build real skills.\",\n",
        "    backstory=\"\"\"\n",
        "    You are a project-based learning mentor.\n",
        "    You design 3-5 mini-projects per learner, each practical and building on prior knowledge.\n",
        "    Projects include hints, success criteria, and resources to ensure effective learning.\n",
        "    Inspired by ProjectLearn.io to make learning interactive and applied.\n",
        "    \"\"\",\n",
        "    verbose=True\n",
        ")\n",
        "\n",
        "progress_agent = Agent(\n",
        "    llm=llm,\n",
        "    role=\"Progress Tracking Agent\",\n",
        "    goal=\"Track learner progress, highlight struggle points, and recommend next challenges.\",\n",
        "    backstory=\"\"\"\n",
        "    You are a progress guide who monitors milestones.\n",
        "    You provide motivation, visualize skill growth, and suggest personalized next steps.\n",
        "    Your goal is to ensure learners stay on track and continue building skills efficiently.\n",
        "    Provide the progress table in a clean, readable format without excessive dashes.\n",
        "    \"\"\",\n",
        "    verbose=True\n",
        ")\n",
        "\n",
        "# ------------------ Define Tasks ------------------\n",
        "\n",
        "assessment_task = Task(\n",
        "    description=\"Assess user's skill level, goals, and learning style.\",\n",
        "    expected_output=\"JSON with skill_level, gaps, learning_style, recommended_path\",\n",
        "    agent=learner_agent\n",
        ")\n",
        "\n",
        "practical_learning_task = Task(\n",
        "    description=\"Suggest 3-5 practical mini-projects based on learner assessment.\",\n",
        "    expected_output=\"Structured learning plan with mini-projects\",\n",
        "    agent=mentor_agent,\n",
        "    context=[assessment_task]\n",
        ")\n",
        "\n",
        "progress_tracking_task = Task(\n",
        "    description=\"Track progress and suggest next challenges.\",\n",
        "    expected_output=\"Clean progress tracking framework with next steps\",\n",
        "    agent=progress_agent,\n",
        "    context=[assessment_task, practical_learning_task]\n",
        ")\n",
        "\n",
        "# ------------------ Assemble Crew ------------------\n",
        "\n",
        "learning_crew = Crew(\n",
        "    agents=[learner_agent, mentor_agent, progress_agent],\n",
        "    tasks=[assessment_task, practical_learning_task, progress_tracking_task],\n",
        "    process=Process.sequential,\n",
        "    verbose=True\n",
        ")\n",
        "\n",
        "# ------------------ Example Input ------------------\n",
        "\n",
        "learning_session = {\n",
        "    \"topic\": \"Python loops\",\n",
        "    \"level\": \"Beginner\",\n",
        "    \"goal\": \"Build web scraping skills\",\n",
        "    \"time_commitment\": \"2 hours/week\",\n",
        "    \"previous_experience\": \"Basic Python syntax\"\n",
        "}\n",
        "\n",
        "# ------------------ Run Crew ------------------\n",
        "\n",
        "result = learning_crew.kickoff(inputs=learning_session)\n",
        "\n",
        "# ------------------ Format Output ------------------\n",
        "\n",
        "def clean_progress_table(progress_raw):\n",
        "    \"\"\"\n",
        "    Replace excessive dashes with a clean table template.\n",
        "    \"\"\"\n",
        "    clean_table = \"\"\"\n",
        "## Progress Tracking Framework\n",
        "\n",
        "| Mini-Project | Objective | Status | Completion Date | Notes/Reflections |\n",
        "|--------------|-----------|--------|----------------|-----------------|\n",
        "| Project 1    |           |        |                |                 |\n",
        "| Project 2    |           |        |                |                 |\n",
        "| Project 3    |           |        |                |                 |\n",
        "| Project 4    |           |        |                |                 |\n",
        "| Project 5    |           |        |                |                 |\n",
        "\"\"\"\n",
        "    return clean_table\n",
        "\n",
        "def format_learning_plan(result):\n",
        "    return {\n",
        "        \"assessment\": result.tasks_output[0].raw,\n",
        "        \"learning_plan\": result.tasks_output[1].raw,\n",
        "        \"progress_framework\": clean_progress_table(result.tasks_output[2].raw),\n",
        "        \"next_session_prep\": \"Ready for hands-on coding\"\n",
        "    }\n",
        "\n",
        "formatted_result = format_learning_plan(result)\n",
        "print(json.dumps(formatted_result, indent=2))\n",
        "\n"
      ],
      "metadata": {
        "id": "JWG-0gISILWr"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}